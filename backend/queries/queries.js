const { Pool } = require('pg');
const parse = require('pg-connection-string').parse;

const config = parse(process.env.DATABASE_URL)

const pool = new Pool(config);

// === Queries are below ===

const uploadMovement = (req, res, next) => {
  const {user_id, title, description, thumbnail, keyframes, canvas_height, canvas_width} = req.body;

  const query = {
    text: `
    INSERT INTO movements (user_id, title, description, thumbnail, keyframes, canvas_height, canvas_width)
      VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *;
    `,
    values: [user_id, title, description, thumbnail, keyframes, canvas_height, canvas_width]
  };

  pool.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.send();
  });
};

const getAllMovements = (req, res, next) => {
  const query = {
    text: `
    Select 
      movements.movement_id,
      movements.user_id,
      movers.firstname,
      movements.title,
      movements.description,
      movements.thumbnail,
      movements.canvas_height,
      movements.canvas_width
    FROM
      movements
    INNER JOIN movers ON movements.user_id = movers.user_id;
    `
  };

  pool.query(query, (error, results) => {
    if (error) {
      res.send(400, 'Request could not be processed.');
    }
    res.send(results.rows);
  });
};


async function setUpTables(request, response) {
  
  const createUserTable = `
    DROP TABLE IF EXISTS "movers";

    CREATE TABLE "movers" (
      user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      email varchar,
      username varchar,
      password varchar
    );`
  ;

  const populateUserTable = `
      INSERT INTO "movers" (email, username, password)
        VALUES ('dio@example.com', 'dio', 'password') RETURNING *;
      `
  ;

  const createMovementTable = `
    DROP TABLE IF EXISTS "movements";

    CREATE TABLE "movements" (
      movement_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      user_id integer,
      title varchar,
      description varchar,
      thumbnail varchar,
      keyframes jsonb,
      canvas_height int,
      canvas_width int
    );`
  ;
  
  await pool.query(createUserTable).catch((err) => {
    console.log(err);
  });

  await pool.query(populateUserTable).catch((err) => {
    console.log(err);
  });

  await pool.query(createMovementTable).catch((err, res) => {
    console.log(err);
  });

  response.send('Populated!')

};

module.exports = {
  pool,
  uploadMovement,
  getAllMovements,
  setUpTables
}