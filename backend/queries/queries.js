const { Pool } = require('pg');
const parse = require('pg-connection-string').parse;

const config = parse('postgres://me:password@localhost:5432/movement')

const pool = new Pool(config);

// === Queries are below ===

const uploadMovement = (req, res, next) => {
  const {user_id, title, description, thumbnail, keyframes, canvas_height, canvas_width} = req.body;

  const query = {
    text: `
    INSERT INTO movements (user_id, title, description, thumbnail, keyframes, canvas_height, canvas_width)
      VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *;
    `,
    values: [user_id, title, description, thumbnail, keyframes, canvas_height, canvas_width]
  };

  pool.query(query, (error, results) => {
    if (error) {
      throw error;
    }
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.send();
  });
};

const getAllMovements = (req, res, next) => {
  const query = {
    text: `
    SELECT
      movement_id,
      title,
      description,
      thumbnail
    FROM movements;
    `
  };

  pool.query(query, (error, results) => {
    if (error) {
      res.send(400, 'Request could not be processed.');
    }
    res.send(results.rows);
  });
};

async function setUpTables(request, response) {
  
  const createUserTable = `
    CREATE TABLE "movers" (
      user_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      email varchar,
      firstname varchar,
      lastname varchar,
      password varchar
    );`
  ;

  // const createMovementTable = `
  //   CREATE TABLE "movements" (
  //     movement_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  //     user_id integer REFERENCES "movers"(user_id),
  //     title varchar,
  //     description varchar,
  //     keyframes jsonb,
  //     canvas_height int,
  //     canvas_width int
  //   );`
  // ;

  const createMovementTable = `
    CREATE TABLE "movements" (
      movement_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      user_id integer,
      title varchar,
      description varchar,
      thumbnail varchar,
      keyframes jsonb,
      canvas_height int,
      canvas_width int
    );`
  ;
  
  await pool.query(createUserTable).catch((err) => {
    console.log(err);
  });

  await pool.query(createMovementTable).catch((err) => {
    console.log(err);
  });

};

module.exports = {
  uploadMovement,
  getAllMovements,
  setUpTables
}